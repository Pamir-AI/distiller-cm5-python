#!/bin/bash

# Pre-push hook to ensure code quality and run tests
echo "Running pre-push checks..."

# Get the current branch name
BRANCH=$(git symbolic-ref --short HEAD)
REMOTE="$1"
URL="$2"

# Prevent direct push to main/master branch (if not allowed)
if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
    echo "❌ Direct push to $BRANCH branch is not allowed."
    echo "Please create a pull request instead."
    exit 1
fi

# Run Python tests if they exist
if [ -d "tests" ]; then
    echo "Running Python tests..."
    python -m unittest discover tests || {
        echo "❌ Tests failed. Please fix before pushing."
        exit 1
    }
fi

# Check for any leftover debug print statements
PYTHON_FILES=$(git diff --name-only HEAD~5..HEAD | grep -E '\.py$')
if [ -n "$PYTHON_FILES" ]; then
    for file in $PYTHON_FILES; do
        if [ -f "$file" ] && grep -n "print(" "$file" | grep -v "# NOQA" | grep -v "# Debug allowed"; then
            echo "⚠️ Warning: Leftover print statements found in $file"
            echo "Remove debug print statements or add '# Debug allowed' comment to suppress this warning"
        fi
    done
fi

# Ensure only new commits follow conventional commit format
echo "Checking commit messages for conventional format..."

# Get the latest commit that exists on the remote branch
REMOTE_SHA=""
if git ls-remote --heads $REMOTE $BRANCH | grep -q $BRANCH; then
    REMOTE_SHA=$(git rev-parse $REMOTE/$BRANCH 2>/dev/null || echo "")
fi

# If this is a new branch, we only check the commits on this branch
# Otherwise, we check commits between remote branch and current HEAD
if [ -n "$REMOTE_SHA" ]; then
    COMMITS_TO_CHECK=$(git log --format=%H $REMOTE_SHA..HEAD 2>/dev/null)
else
    # For a new branch, let's skip the commit format check for now
    # This avoids checking commits that were created before the hooks were installed
    echo "This appears to be a new branch push. Skipping commit format check."
    COMMITS_TO_CHECK=""
fi

if [ -n "$COMMITS_TO_CHECK" ]; then
    bad_commits=()
    for commit in $COMMITS_TO_CHECK; do
        message=$(git log --format=%s -n 1 "$commit")
        # Fixed regex pattern with proper escaping
        if ! [[ "$message" =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\([a-z0-9-]+\))?:[[:space:]][a-z] ]]; then
            bad_commits+=("$commit: $message")
        fi
    done

    if [ ${#bad_commits[@]} -ne 0 ]; then
        echo "❌ The following commits don't follow conventional commit format:"
        printf "  %s\n" "${bad_commits[@]}"
        echo "Please fix them with 'git rebase -i' and try again."
        exit 1
    fi
fi

echo "✅ Pre-push checks passed!"
exit 0 